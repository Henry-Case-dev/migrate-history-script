package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"migrate-history-script/internal/config"
	"migrate-history-script/internal/gemini"
	"migrate-history-script/internal/storage"
	"migrate-history-script/internal/utils"
)

func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

func testSetup() {
	fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
	workDir, err := os.Getwd()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	fmt.Printf("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n", workDir)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	envPath := filepath.Join(workDir, ".env")
	if err := utils.LoadEnvFile(envPath); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: %v", err)
	}
	fmt.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: %s\n", envPath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	requiredVars := []string{
		"POSTGRESQL_HOST",
		"POSTGRESQL_USER",
		"POSTGRESQL_PASSWORD",
		"POSTGRESQL_DBNAME",
		"GEMINI_API_KEY",
	}

	fmt.Println("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
	for _, varName := range requiredVars {
		value := os.Getenv(varName)
		if value == "" {
			fmt.Printf("‚ùå %s: –ù–ï –ó–ê–î–ê–ù–ê\n", varName)
		} else {
			if varName == "GEMINI_API_KEY" || varName == "POSTGRESQL_PASSWORD" {
				fmt.Printf("‚úÖ %s: ***—Å–∫—Ä—ã—Ç–æ*** (–¥–ª–∏–Ω–∞: %d)\n", varName, len(value))
			} else {
				fmt.Printf("‚úÖ %s: %s\n", varName, value)
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
	fmt.Println("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")

	dirs := map[string]string{
		"data":             filepath.Join(workDir, "data"),
		"cache":            filepath.Join(workDir, "cache"),
		"cache/embeddings": filepath.Join(workDir, "cache", "embeddings"),
	}

	for name, path := range dirs {
		if _, err := os.Stat(path); os.IsNotExist(err) {
			fmt.Printf("‚ö†Ô∏è %s: %s (–ù–ï –°–£–©–ï–°–¢–í–£–ï–¢)\n", name, path)
			// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
			if err := os.MkdirAll(path, 0755); err != nil {
				fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å %s: %v\n", name, err)
			} else {
				fmt.Printf("‚úÖ %s: %s (–°–û–ó–î–ê–ù–ê)\n", name, path)
			}
		} else {
			fmt.Printf("‚úÖ %s: %s\n", name, path)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–∞–π–ª—ã –≤ data
	dataDir := filepath.Join(workDir, "data")
	files, err := filepath.Glob(filepath.Join(dataDir, "*.json"))
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v\n", err)
	} else {
		fmt.Printf("\nüìã JSON —Ñ–∞–π–ª—ã –≤ data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %d\n", len(files))
		for i, file := range files {
			info, _ := os.Stat(file)
			fmt.Printf("  %d. %s (%s)\n", i+1, filepath.Base(file), formatFileSize(info.Size()))
			if i >= 4 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
				fmt.Printf("  ... –∏ –µ—â–µ %d —Ñ–∞–π–ª–æ–≤\n", len(files)-5)
				break
			}
		}

		if len(files) == 0 {
			fmt.Println("‚ö†Ô∏è –í data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç JSON —Ñ–∞–π–ª–æ–≤!")
			fmt.Println("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram –≤ data/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
		}
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	fmt.Println("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")

	dbHost := os.Getenv("POSTGRESQL_HOST")
	dbPort := utils.GetEnvOrDefault("POSTGRESQL_PORT", "5432")
	dbUser := os.Getenv("POSTGRESQL_USER")
	dbPassword := os.Getenv("POSTGRESQL_PASSWORD")
	dbName := os.Getenv("POSTGRESQL_DBNAME")

	storage, err := storage.NewPostgresStorage(dbHost, dbPort, dbUser, dbPassword, dbName, 1000, false)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v\n", err)
	} else {
		defer storage.Close()
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: %s:%s\n", dbHost, dbPort)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API
	fmt.Println("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API...")

	cfg := &config.Config{
		GeminiAPIKey:             os.Getenv("GEMINI_API_KEY"),
		GeminiModelName:          "gemini-2.5-flash",
		GeminiEmbeddingModelName: utils.GetEnvOrDefault("GEMINI_EMBEDDING_MODEL_NAME", "embedding-001"),
		Debug:                    false,
	}

	llmClient, err := gemini.New(cfg, cfg.GeminiModelName, cfg.GeminiEmbeddingModelName, cfg.Debug)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: %v\n", err)
	} else {
		defer llmClient.Close()

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
		testText := "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"
		fmt.Printf("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è: \"%s\"\n", testText)

		start := time.Now()
		embedding, err := llmClient.EmbedContent(testText)
		duration := time.Since(start)

		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %v\n", err)
		} else {
			fmt.Printf("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:\n")
			fmt.Printf("   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: %d\n", len(embedding))
			fmt.Printf("   ‚Ä¢ –í—Ä–µ–º—è: %v\n", duration)
			fmt.Printf("   ‚Ä¢ –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: [%.3f, %.3f, %.3f, %.3f, %.3f]\n",
				embedding[0], embedding[1], embedding[2], embedding[3], embedding[4])
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	fmt.Println("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
	fmt.Printf("   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: %s\n", utils.GetEnvOrDefault("EMBEDDING_REQUESTS_PER_MINUTE", "240"))
	fmt.Printf("   ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: %s\n", utils.GetEnvOrDefault("EMBEDDING_REQUESTS_PER_DAY", "24000"))
	fmt.Printf("   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: %s\n", utils.GetEnvOrDefault("EMBEDDING_REQUEST_DELAY", "300ms"))

	// –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	fmt.Println("\nüìù –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")

	if len(files) == 0 {
		fmt.Println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª—ã –≤ data/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏")
	}

	if os.Getenv("GEMINI_API_KEY") == "" {
		fmt.Println("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–¥–∞–π—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
	}

	if os.Getenv("POSTGRESQL_HOST") == "" {
		fmt.Println("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –≤ .env —Ñ–∞–π–ª–µ")
	}

	fmt.Println("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
	fmt.Println("   go run main.go")
	fmt.Println("   –∏–ª–∏")
	fmt.Println("   go build -o migrate_history.exe && ./migrate_history.exe")
}

func main() {
	testSetup()
}
