package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"sync"
	"syscall"
	"time"

	"migrate-history-script/internal/config"
	"migrate-history-script/internal/gemini"
	"migrate-history-script/internal/llm"
	"migrate-history-script/internal/storage"
	"migrate-history-script/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/schollz/progressbar/v3"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram
type TelegramExportMessage struct {
	ID               int           `json:"id"`
	Type             string        `json:"type"`
	Date             string        `json:"date"`
	DateUnixtime     string        `json:"date_unixtime"`
	From             string        `json:"from,omitempty"`
	FromID           string        `json:"from_id,omitempty"`
	Text             interface{}   `json:"text,omitempty"`
	ReplyToMessageID int           `json:"reply_to_message_id,omitempty"`
	Photo            string        `json:"photo,omitempty"`
	File             string        `json:"file,omitempty"`
	MediaType        string        `json:"media_type,omitempty"`
	Entities         []interface{} `json:"entities,omitempty"`
}

type TelegramExport struct {
	Name     string                  `json:"name"`
	Type     string                  `json:"type"`
	ID       int64                   `json:"id"`
	Messages []TelegramExportMessage `json:"messages"`
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type MigrationState struct {
	CurrentFile     string        `json:"current_file"`
	ProcessedFiles  []string      `json:"processed_files"`
	CurrentIndex    int           `json:"current_index"`
	TotalMessages   int           `json:"total_messages"`
	ProcessedCount  int           `json:"processed_count"`
	VectorizedCount int           `json:"vectorized_count"`
	LastUpdateTime  time.Time     `json:"last_update_time"`
	ChatMessagesMap map[int64]int `json:"chat_messages_map"` // chatID -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
}

// Rate Limiter –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
type RateLimiter struct {
	requestsThisMinute   int
	requestsToday        int
	lastMinuteReset      time.Time
	lastDayReset         time.Time
	maxRequestsPerMinute int
	maxRequestsPerDay    int
	requestDelay         time.Duration
	currentDelay         time.Duration
	consecutiveErrors    int
	isThrottled          bool
	mu                   sync.Mutex
}

func NewRateLimiter(reqPerMin, reqPerDay int, delay time.Duration) *RateLimiter {
	return &RateLimiter{
		maxRequestsPerMinute: reqPerMin,
		maxRequestsPerDay:    reqPerDay,
		requestDelay:         delay,
		currentDelay:         delay,
		lastMinuteReset:      time.Now(),
		lastDayReset:         time.Now(),
	}
}

func (rl *RateLimiter) WaitForRequest(ctx context.Context) error {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	now := time.Now()

	// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
	if now.Sub(rl.lastMinuteReset) >= time.Minute {
		rl.requestsThisMinute = 0
		rl.lastMinuteReset = now
	}

	if now.Sub(rl.lastDayReset) >= 24*time.Hour {
		rl.requestsToday = 0
		rl.lastDayReset = now
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
	if rl.requestsThisMinute >= rl.maxRequestsPerMinute {
		waitTime := time.Minute - now.Sub(rl.lastMinuteReset)
		log.Printf("[RateLimiter] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω—É—Ç–Ω—ã–π –ª–∏–º–∏—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ %v", waitTime)

		select {
		case <-time.After(waitTime):
			rl.requestsThisMinute = 0
			rl.lastMinuteReset = time.Now()
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	if rl.requestsToday >= rl.maxRequestsPerDay {
		waitTime := 24*time.Hour - now.Sub(rl.lastDayReset)
		log.Printf("[RateLimiter] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ %v", waitTime)

		select {
		case <-time.After(waitTime):
			rl.requestsToday = 0
			rl.lastDayReset = time.Now()
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
	if rl.isThrottled {
		select {
		case <-time.After(rl.currentDelay):
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
	rl.requestsThisMinute++
	rl.requestsToday++

	return nil
}

func (rl *RateLimiter) OnSuccess() {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	rl.consecutiveErrors = 0
	rl.isThrottled = false
	rl.currentDelay = rl.requestDelay
}

func (rl *RateLimiter) OnRateLimit() {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	rl.consecutiveErrors++
	rl.isThrottled = true

	// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
	rl.currentDelay = time.Duration(float64(rl.requestDelay) * (1.5 * float64(rl.consecutiveErrors)))
	if rl.currentDelay > 5*time.Minute {
		rl.currentDelay = 5 * time.Minute
	}

	log.Printf("[RateLimiter] Rate limit detected, —É–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ %v", rl.currentDelay)
}

func (rl *RateLimiter) GetStatus() (int, int, time.Duration) {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	return rl.requestsThisMinute, rl.requestsToday, rl.currentDelay
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
type ContextualEmbedder struct {
	llmClient   llm.LLMClient
	rateLimiter *RateLimiter
	cacheDir    string
	cache       map[string][]float32
	cacheMu     sync.RWMutex
}

func NewContextualEmbedder(llmClient llm.LLMClient, rateLimiter *RateLimiter, cacheDir string) *ContextualEmbedder {
	ce := &ContextualEmbedder{
		llmClient:   llmClient,
		rateLimiter: rateLimiter,
		cacheDir:    cacheDir,
		cache:       make(map[string][]float32),
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞
	if cacheDir != "" {
		os.MkdirAll(cacheDir, 0755)
		ce.loadCache()
	}

	return ce
}

func (ce *ContextualEmbedder) GenerateEmbeddingWithContext(
	currentMsg *TelegramExportMessage,
	contextMsgs []TelegramExportMessage,
	targetIndex int,
) ([]float32, string, error) {

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É
	contextStr := ce.buildContextString(contextMsgs, targetIndex)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	if ce.cacheDir != "" {
		if cached := ce.getCachedEmbedding(contextStr); cached != nil {
			return cached, contextStr, nil
		}
	}

	// –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := ce.rateLimiter.WaitForRequest(ctx); err != nil {
		return nil, "", fmt.Errorf("timeout waiting for rate limiter: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
	embedding, err := ce.llmClient.EmbedContent(contextStr)
	if err != nil {
		ce.rateLimiter.OnRateLimit()
		return nil, "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %w", err)
	}

	ce.rateLimiter.OnSuccess()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
	if ce.cacheDir != "" {
		ce.setCachedEmbedding(contextStr, embedding)
	}

	return embedding, contextStr, nil
}

func (ce *ContextualEmbedder) buildContextString(msgs []TelegramExportMessage, targetIndex int) string {
	if len(msgs) == 0 || targetIndex >= len(msgs) {
		return ""
	}

	var builder strings.Builder
	windowSize := ce.determineOptimalWindowSize(&msgs[targetIndex], msgs, targetIndex)

	start := max(0, targetIndex-windowSize)
	end := min(len(msgs), targetIndex+windowSize+1)

	for i := start; i < end; i++ {
		msg := &msgs[i]
		if !ce.shouldIncludeInContext(msg) {
			continue
		}

		userName := ce.getUserDisplayName(msg)
		text := ce.getMessageText(msg)

		if i == targetIndex {
			// –í—ã–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			builder.WriteString(fmt.Sprintf(">>> %s: %s <<<\n", userName, text))
		} else {
			builder.WriteString(fmt.Sprintf("%s: %s\n", userName, text))
		}
	}

	return strings.TrimSpace(builder.String())
}

func (ce *ContextualEmbedder) determineOptimalWindowSize(msg *TelegramExportMessage, context []TelegramExportMessage, index int) int {
	baseWindow := 5

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	if ce.isImportantMessage(msg) {
		return 25
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ reply chains
	if msg.ReplyToMessageID != 0 {
		return 15
	}

	text := ce.getMessageText(msg)
	if len(text) > 100 || strings.Contains(text, "?") {
		return 10
	}

	return baseWindow
}

func (ce *ContextualEmbedder) isImportantMessage(msg *TelegramExportMessage) bool {
	text := ce.getMessageText(msg)
	if len(text) > 200 {
		return true
	}

	// –°–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
	if strings.Contains(text, "?") || strings.Contains(text, "–∫–∞–∫") || strings.Contains(text, "—á—Ç–æ") {
		return true
	}

	// –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
	keywords := []string{"–≤–∞–∂–Ω–æ", "–ø—Ä–æ–±–ª–µ–º–∞", "–ø–æ–º–æ—â—å", "—Ä–µ—à–µ–Ω–∏–µ", "–∑–∞–¥–∞—á–∞", "–ø–∏–∑–¥–µ—Ü", "–Ω–æ—Ä–º", "–∫—Ä–∏–Ω–∂", "–∫–∞–π—Ñ", "–ª–æ–ª", "–∑–∞—á–µ–º", "–ø–æ—á–µ–º—É", "–∫–µ–∫"}
	lowerText := strings.ToLower(text)
	for _, keyword := range keywords {
		if strings.Contains(lowerText, keyword) {
			return true
		}
	}

	return false
}

func (ce *ContextualEmbedder) shouldIncludeInContext(msg *TelegramExportMessage) bool {
	if msg.Type != "message" {
		return false
	}

	text := strings.TrimSpace(ce.getMessageText(msg))
	if len(text) < 5 {
		return false
	}

	// –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	lowText := strings.ToLower(text)
	if lowText == "–¥–∞" || lowText == "–Ω–µ—Ç" || lowText == "–æ–∫" || lowText == "–ª–æ–ª" || lowText == "üëç" || lowText == "üëé" {
		return false
	}

	return true
}

func (ce *ContextualEmbedder) getUserDisplayName(msg *TelegramExportMessage) string {
	if msg.From != "" {
		return msg.From
	}
	if msg.FromID != "" {
		return msg.FromID
	}
	return "Unknown"
}

func (ce *ContextualEmbedder) getMessageText(msg *TelegramExportMessage) string {
	if msg.Text == nil {
		return "[non-text message]"
	}

	switch v := msg.Text.(type) {
	case string:
		return v
	case []interface{}:
		var result strings.Builder
		for _, item := range v {
			if str, ok := item.(string); ok {
				result.WriteString(str)
			} else if obj, ok := item.(map[string]interface{}); ok {
				if text, exists := obj["text"]; exists {
					if textStr, ok := text.(string); ok {
						result.WriteString(textStr)
					}
				}
			}
		}
		return result.String()
	default:
		return "[unknown text format]"
	}
}

func (ce *ContextualEmbedder) getCachedEmbedding(text string) []float32 {
	ce.cacheMu.RLock()
	defer ce.cacheMu.RUnlock()

	if embedding, exists := ce.cache[text]; exists {
		return embedding
	}
	return nil
}

func (ce *ContextualEmbedder) setCachedEmbedding(text string, embedding []float32) {
	ce.cacheMu.Lock()
	defer ce.cacheMu.Unlock()

	ce.cache[text] = embedding

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
	if len(ce.cache)%100 == 0 {
		go ce.saveCache()
	}
}

func (ce *ContextualEmbedder) loadCache() {
	cacheFile := filepath.Join(ce.cacheDir, "embeddings_cache.json")
	data, err := os.ReadFile(cacheFile)
	if err != nil {
		return // –ö—ç—à —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	}

	ce.cacheMu.Lock()
	defer ce.cacheMu.Unlock()

	json.Unmarshal(data, &ce.cache)
	log.Printf("[Cache] –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –∫—ç—à–∞", len(ce.cache))
}

func (ce *ContextualEmbedder) saveCache() {
	if ce.cacheDir == "" {
		return
	}

	cacheFile := filepath.Join(ce.cacheDir, "embeddings_cache.json")

	ce.cacheMu.RLock()
	data, _ := json.Marshal(ce.cache)
	ce.cacheMu.RUnlock()

	os.WriteFile(cacheFile, data, 0644)
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ç–æ—Ä–∞
type HistoryMigrator struct {
	storage     *storage.PostgresStorage
	embedder    *ContextualEmbedder
	state       *MigrationState
	stateFile   string
	progressBar *progressbar.ProgressBar
	isPaused    bool
	pauseMu     sync.RWMutex
	maxRetries  int // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
}

func NewHistoryMigrator(storage *storage.PostgresStorage, embedder *ContextualEmbedder, stateFile string, maxRetries int) *HistoryMigrator {
	if maxRetries <= 0 {
		maxRetries = 5 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	
	migrator := &HistoryMigrator{
		storage:    storage,
		embedder:   embedder,
		stateFile:  stateFile,
		state:      &MigrationState{ChatMessagesMap: make(map[int64]int)},
		maxRetries: maxRetries,
	}

	migrator.loadState()
	return migrator
}

func (hm *HistoryMigrator) loadState() {
	data, err := os.ReadFile(hm.stateFile)
	if err != nil {
		log.Printf("[State] –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
		return
	}

	if err := json.Unmarshal(data, hm.state); err != nil {
		log.Printf("[State] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ", err)
		hm.state = &MigrationState{ChatMessagesMap: make(map[int64]int)}
	} else {
		log.Printf("[State] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d/%d —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ %d",
			hm.state.ProcessedCount, hm.state.TotalMessages, hm.state.VectorizedCount)
	}
}

func (hm *HistoryMigrator) saveState() {
	hm.state.LastUpdateTime = time.Now()
	data, _ := json.MarshalIndent(hm.state, "", "  ")
	os.WriteFile(hm.stateFile, data, 0644)
}

func (hm *HistoryMigrator) Pause() {
	hm.pauseMu.Lock()
	defer hm.pauseMu.Unlock()
	hm.isPaused = true
	log.Printf("[Migration] –ü–ê–£–ó–ê –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
}

func (hm *HistoryMigrator) Resume() {
	hm.pauseMu.Lock()
	defer hm.pauseMu.Unlock()
	hm.isPaused = false
	log.Printf("[Migration] –ú–∏–≥—Ä–∞—Ü–∏—è –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ê")
}

func (hm *HistoryMigrator) checkPause() {
	for {
		hm.pauseMu.RLock()
		paused := hm.isPaused
		hm.pauseMu.RUnlock()

		if !paused {
			break
		}
		time.Sleep(1 * time.Second)
	}
}

func (hm *HistoryMigrator) MigrateHistoryDirectory(historyDir string) error {
	// –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã
	files, err := hm.scanJSONFiles(historyDir)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %w", err)
	}

	log.Printf("[Migration] –ù–∞–π–¥–µ–Ω–æ %d JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", len(files))

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ
	if hm.state.TotalMessages == 0 {
		hm.state.TotalMessages = hm.countTotalMessages(files)
		hm.saveState()
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	hm.progressBar = progressbar.NewOptions(hm.state.TotalMessages,
		progressbar.OptionEnableColorCodes(true),
		progressbar.OptionSetDescription("[cyan][Migration][reset] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π..."),
		progressbar.OptionSetTheme(progressbar.Theme{
			Saucer:        "[green]=[reset]",
			SaucerHead:    "[green]>[reset]",
			SaucerPadding: " ",
			BarStart:      "[",
			BarEnd:        "]",
		}))

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
	hm.progressBar.Set(hm.state.ProcessedCount)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
	for _, file := range files {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
		if hm.isFileProcessed(file) {
			continue
		}

		hm.state.CurrentFile = file
		hm.saveState()

		log.Printf("[Migration] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s", file)
		if err := hm.processJSONFile(file); err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ %s: %v", file, err)
			continue
		}

		hm.state.ProcessedFiles = append(hm.state.ProcessedFiles, file)
		hm.saveState()
	}

	hm.progressBar.Finish()
	log.Printf("[Migration] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ %d",
		hm.state.ProcessedCount, hm.state.VectorizedCount)

	return nil
}

func (hm *HistoryMigrator) scanJSONFiles(dir string) ([]string, error) {
	var files []string
	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if filepath.Ext(path) == ".json" {
			files = append(files, path)
		}
		return nil
	})
	return files, err
}

func (hm *HistoryMigrator) countTotalMessages(files []string) int {
	total := 0
	for _, file := range files {
		data, err := os.ReadFile(file)
		if err != nil {
			continue
		}

		var export TelegramExport
		if err := json.Unmarshal(data, &export); err != nil {
			continue
		}

		for _, msg := range export.Messages {
			if hm.shouldProcessMessage(&msg) {
				total++
			}
		}
	}
	return total
}

func (hm *HistoryMigrator) isFileProcessed(file string) bool {
	for _, processed := range hm.state.ProcessedFiles {
		if processed == file {
			return true
		}
	}
	return false
}

func (hm *HistoryMigrator) shouldProcessMessage(msg *TelegramExportMessage) bool {
	return msg.Type == "message" && len(strings.TrimSpace(hm.embedder.getMessageText(msg))) >= 5
}

func (hm *HistoryMigrator) processJSONFile(filePath string) error {
	data, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %w", err)
	}

	var export TelegramExport
	if err := json.Unmarshal(data, &export); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %w", err)
	}

	log.Printf("[File] %s: –Ω–∞–π–¥–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π", filepath.Base(filePath), len(export.Messages))

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	var validMessages []TelegramExportMessage
	for _, msg := range export.Messages {
		if hm.shouldProcessMessage(&msg) {
			validMessages = append(validMessages, msg)
		}
	}

	log.Printf("[File] %s: –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d", filepath.Base(filePath), len(validMessages))

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	batchSize := 50
	for i := 0; i < len(validMessages); i += batchSize {
		hm.checkPause() // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É

		end := i + batchSize
		if end > len(validMessages) {
			end = len(validMessages)
		}

		batch := validMessages[i:end]
		if err := hm.processBatch(batch, validMessages, export.ID); err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ %d-%d: %v", i, end, err)
			continue
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
		time.Sleep(1 * time.Second)
	}

	return nil
}

func (hm *HistoryMigrator) processBatch(batch []TelegramExportMessage, allMessages []TelegramExportMessage, chatID int64) error {
	for _, msg := range batch {
		hm.checkPause() // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É

		// –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å retry
		if err := hm.processMessageWithRetry(&msg, allMessages, chatID); err != nil {
			log.Printf("‚ùå [CRITICAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %d –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: %v", msg.ID, err)
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			continue
		}

		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		hm.state.ProcessedCount++

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		if hm.progressBar != nil {
			hm.progressBar.Set(hm.state.ProcessedCount)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
		if hm.state.ProcessedCount%10 == 0 {
			hm.saveState()
		}

		// –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
		if hm.state.ProcessedCount%100 == 0 {
			hm.logDetailedProgress()
		}
	}

	return nil
}

// processMessageWithRetry –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å retry –ª–æ–≥–∏–∫–æ–π
func (hm *HistoryMigrator) processMessageWithRetry(msg *TelegramExportMessage, allMessages []TelegramExportMessage, chatID int64) error {
	baseDelay := 2 * time.Second

	var lastErr error

	for attempt := 0; attempt < hm.maxRetries; attempt++ {
		if attempt > 0 {
			// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2s, 4s, 8s, 16s, 32s
			delay := baseDelay * time.Duration(1<<uint(attempt-1))
			if delay > 60*time.Second {
				delay = 60 * time.Second
			}
			log.Printf("‚è≥ [Retry %d/%d] –û–∂–∏–¥–∞–Ω–∏–µ %v –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %d", 
				attempt+1, hm.maxRetries, delay, msg.ID)
			time.Sleep(delay)
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç tgbotapi.Message
		tgMsg := hm.convertToTelegramMessage(msg, chatID)

		// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
		globalIndex := hm.findMessageIndex(msg.ID, allMessages)
		if globalIndex < 0 {
			return fmt.Errorf("message not found in context")
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
		embedding, context, err := hm.embedder.GenerateEmbeddingWithContext(msg, allMessages, globalIndex)
		if err != nil {
			lastErr = fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: %w", err)
			log.Printf("‚ùå [Attempt %d/%d] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", 
				attempt+1, hm.maxRetries, msg.ID, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		if err := hm.storage.AddMessage(chatID, tgMsg); err != nil {
			lastErr = fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %w", err)
			log.Printf("‚ùå [Attempt %d/%d] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è %d –≤ –ë–î: %v", 
				attempt+1, hm.maxRetries, msg.ID, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ PostgreSQL
		if err := hm.storage.UpdateMessageEmbeddingWithContext(chatID, msg.ID, embedding, context); err != nil {
			lastErr = fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≤ –ë–î: %w", err)
			log.Printf("‚ùå [Attempt %d/%d] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", 
				attempt+1, hm.maxRetries, msg.ID, err)
			continue
		}

		// –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!
		hm.state.VectorizedCount++
		
		if attempt > 0 {
			log.Printf("‚úÖ [Success] –°–æ–æ–±—â–µ–Ω–∏–µ %d —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", msg.ID, attempt+1)
		}
		
		return nil
	}

	// –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
	return fmt.Errorf("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (%d): %w", hm.maxRetries, lastErr)
}

// logDetailedProgress –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
func (hm *HistoryMigrator) logDetailedProgress() {
	min, day, delay := hm.embedder.rateLimiter.GetStatus()

	// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	percentComplete := float64(hm.state.ProcessedCount) / float64(hm.state.TotalMessages) * 100

	// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
	elapsed := time.Since(hm.state.LastUpdateTime)
	if elapsed > 0 && hm.state.ProcessedCount > 0 {
		msgPerSecond := float64(hm.state.ProcessedCount) / elapsed.Seconds()

		// –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		remaining := hm.state.TotalMessages - hm.state.ProcessedCount
		estimatedTimeLeft := time.Duration(float64(remaining)/msgPerSecond) * time.Second

		log.Printf("üìä [Progress] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d/%d (%.1f%%) | –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: %d | –°–∫–æ—Ä–æ—Å—Ç—å: %.1f —Å–æ–æ–±—â/—Å–µ–∫",
			hm.state.ProcessedCount, hm.state.TotalMessages, percentComplete, hm.state.VectorizedCount, msgPerSecond)
		log.Printf("‚è±Ô∏è [Progress] –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ~%v | API –ª–∏–º–∏—Ç—ã: %d/–º–∏–Ω, %d/–¥–µ–Ω—å | –ó–∞–¥–µ—Ä–∂–∫–∞: %v",
			estimatedTimeLeft.Round(time.Minute), min, day, delay)
	} else {
		log.Printf("üìä [Progress] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d/%d (%.1f%%) | –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: %d | API: %d/–º–∏–Ω, %d/–¥–µ–Ω—å, –∑–∞–¥–µ—Ä–∂–∫–∞: %v",
			hm.state.ProcessedCount, hm.state.TotalMessages, percentComplete, hm.state.VectorizedCount, min, day, delay)
	}
}

func (hm *HistoryMigrator) findMessageIndex(messageID int, messages []TelegramExportMessage) int {
	for i, msg := range messages {
		if msg.ID == messageID {
			return i
		}
	}
	return -1
}

func (hm *HistoryMigrator) convertToTelegramMessage(msg *TelegramExportMessage, chatID int64) *tgbotapi.Message {
	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
	var unixTime int64
	if msg.DateUnixtime != "" {
		fmt.Sscanf(msg.DateUnixtime, "%d", &unixTime)
	} else if msg.Date != "" {
		if t, err := time.Parse("2006-01-02T15:04:05", msg.Date); err == nil {
			unixTime = t.Unix()
		}
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &tgbotapi.User{
		UserName:  msg.From,
		FirstName: msg.From,
	}

	// –ü–∞—Ä—Å–∏–º FromID –µ—Å–ª–∏ –µ—Å—Ç—å
	if msg.FromID != "" {
		fmt.Sscanf(msg.FromID, "user%d", &user.ID)
	}

	// –°–æ–∑–¥–∞–µ–º —á–∞—Ç
	chat := &tgbotapi.Chat{
		ID: chatID,
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	tgMsg := &tgbotapi.Message{
		MessageID:      msg.ID,
		From:           user,
		Date:           int(unixTime),
		Chat:           chat,
		Text:           hm.embedder.getMessageText(msg),
		ReplyToMessage: nil, // –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è reply chains
	}

	// –î–æ–±–∞–≤–ª—è–µ–º reply –µ—Å–ª–∏ –µ—Å—Ç—å
	if msg.ReplyToMessageID != 0 {
		tgMsg.ReplyToMessage = &tgbotapi.Message{MessageID: msg.ReplyToMessageID}
	}

	return tgMsg
}

func (hm *HistoryMigrator) updateMessageEmbedding(chatID int64, messageID int, embedding []float32, context string) error {
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ PostgresStorage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
	// –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ —Å–æ–∑–¥–∞–¥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ storage
	log.Printf("[DEBUG] –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è %d (—Ä–∞–∑–º–µ—Ä: %d)", messageID, len(embedding))
	return nil
}

// –£—Ç–∏–ª–∏—Ç—ã
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	log.Printf("[Migration] üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
	execPath, err := os.Executable()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞: %v", err)
	}
	workDir := filepath.Dir(execPath)

	// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ go run, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if strings.Contains(execPath, "tmp") || strings.Contains(execPath, "go-build") {
		workDir, _ = os.Getwd()
	}

	log.Printf("[Migration] üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s", workDir)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	envPath := filepath.Join(workDir, ".env")
	if _, err := os.Stat(envPath); err == nil {
		if err := utils.LoadEnvFile(envPath); err != nil {
			log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å %s: %v", envPath, err)
		} else {
			log.Printf("[Migration] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: %s", envPath)
		}
	} else {
		log.Fatalf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª .env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s", workDir)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
	dbHost := os.Getenv("POSTGRESQL_HOST")
	dbPort := os.Getenv("POSTGRESQL_PORT")
	dbUser := os.Getenv("POSTGRESQL_USER")
	dbPassword := os.Getenv("POSTGRESQL_PASSWORD")
	dbName := os.Getenv("POSTGRESQL_DBNAME")
	geminiAPIKey := os.Getenv("GEMINI_API_KEY")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	embeddingModel := utils.GetEnvOrDefault("GEMINI_EMBEDDING_MODEL_NAME", "embedding-001")

	// –ü—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	historyDir := filepath.Join(workDir, "data")
	cacheDir := filepath.Join(workDir, "cache", "embeddings")
	stateFile := filepath.Join(workDir, "migration_state.json")
	logFile := filepath.Join(workDir, "migration.log")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	requiredVars := map[string]string{
		"POSTGRESQL_HOST":     dbHost,
		"POSTGRESQL_USER":     dbUser,
		"POSTGRESQL_PASSWORD": dbPassword,
		"POSTGRESQL_DBNAME":   dbName,
		"GEMINI_API_KEY":      geminiAPIKey,
	}

	for varName, value := range requiredVars {
		if value == "" {
			log.Fatalf("‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è %s –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env", varName)
		}
	}

	if dbPort == "" {
		dbPort = "5432"
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
	setupFileLogging(logFile)

	log.Printf("[Migration] üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: %s:%s (–ë–∞–∑–∞: %s)", dbHost, dbPort, dbName)
	log.Printf("[Migration] üìä –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: %s", embeddingModel)
	log.Printf("[Migration] üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π: %s", historyDir)
	log.Printf("[Migration] üíæ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s", stateFile)
	log.Printf("[Migration] üóÉÔ∏è –ö—ç—à —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: %s", cacheDir)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
	if _, err := os.Stat(historyDir); os.IsNotExist(err) {
		log.Fatalf("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s\n–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë JSON —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ Telegram", historyDir)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PostgreSQL storage
	storage, err := storage.NewPostgresStorage(
		dbHost,
		dbPort,
		dbUser,
		dbPassword,
		dbName,
		1000, // contextWindow
		true, // debug
	)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}
	defer storage.Close()
	log.Printf("[Migration] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

	// –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Gemini
	cfg := &config.Config{
		GeminiAPIKey:             geminiAPIKey,
		GeminiModelName:          "gemini-2.5-flash",
		GeminiEmbeddingModelName: embeddingModel,
		Debug:                    true,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
	llmClient, err := gemini.New(cfg, cfg.GeminiModelName, cfg.GeminiEmbeddingModelName, cfg.Debug)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
	}
	defer llmClient.Close()
	log.Printf("[Migration] ‚úÖ Gemini –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è rate limiter –∏–∑ .env
	reqPerMin := utils.ParseIntOrDefault(utils.GetEnvOrDefault("EMBEDDING_REQUESTS_PER_MINUTE", "240"), 240)
	reqPerDay := utils.ParseIntOrDefault(utils.GetEnvOrDefault("EMBEDDING_REQUESTS_PER_DAY", "24000"), 24000)
	delayStr := utils.GetEnvOrDefault("EMBEDDING_REQUEST_DELAY", "300ms")
	delay, err := time.ParseDuration(delayStr)
	if err != nil {
		delay = 300 * time.Millisecond
		log.Printf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMBEDDING_REQUEST_DELAY, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è %v", delay)
	}

	log.Printf("[Migration] ‚öôÔ∏è Rate Limiter: %d req/–º–∏–Ω, %d req/–¥–µ–Ω—å, –∑–∞–¥–µ—Ä–∂–∫–∞ %v", reqPerMin, reqPerDay, delay)

	// –°–æ–∑–¥–∞–µ–º rate limiter
	rateLimiter := NewRateLimiter(reqPerMin, reqPerDay, delay)

	// –°–æ–∑–¥–∞–µ–º embedder
	embedder := NewContextualEmbedder(llmClient, rateLimiter, cacheDir)

	// –ü–æ–ª—É—á–∞–µ–º maxRetries –∏–∑ .env
	maxRetries := utils.ParseIntOrDefault(utils.GetEnvOrDefault("EMBEDDING_MAX_RETRIES", "5"), 5)
	log.Printf("[Migration] üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: %d", maxRetries)

	// –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
	migrator := NewHistoryMigrator(storage, embedder, stateFile, maxRetries)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	setupSignalHandling(migrator)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
	log.Printf("[Migration] üéØ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s", historyDir)
	if err := migrator.MigrateHistoryDirectory(historyDir); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Printf("[Migration] üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

// setupFileLogging –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
func setupFileLogging(logFile string) {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(filepath.Dir(logFile), 0755); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤: %v", err)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
	file, err := os.OpenFile(logFile, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ %s: %v", logFile, err)
		return
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª)
	multiWriter := io.MultiWriter(os.Stdout, file)
	log.SetOutput(multiWriter)

	log.Printf("[Migration] üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –∫–æ–Ω—Å–æ–ª—å + %s", logFile)
}

// setupSignalHandling –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
func setupSignalHandling(migrator *HistoryMigrator) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	go func() {
		sig := <-c
		log.Printf("[Migration] üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª %v, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...", sig)

		// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
		migrator.Pause()

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		migrator.saveState()

		log.Printf("[Migration] üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤—ã—Ö–æ–¥...")
		os.Exit(0)
	}()

	log.Printf("[Migration] üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
}
